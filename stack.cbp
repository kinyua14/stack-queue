#include <iostream>
using namespace std;

// Node structure for linked list implementation
struct Node {
    int data;
    Node* next;
};

// Stack class for array implementation
class StackArray {
private:
    int top;
    int arr[100];
public:
    StackArray() {
        top = -1;
    }

    bool push(int x) {
        if (top >= 99) {
            cout << "Stack Overflow" << endl;
            return false;
        }
        arr[++top] = x;
        return true;
    }

    int pop() {
        if (top < 0) {
            cout << "Stack Underflow" << endl;
            return 0;
        }
        return arr[top--];
    }

    int peek() {
        if (top < 0) {
            cout << "Stack is Empty" << endl;
            return 0;
        }
        return arr[top];
    }

    bool isEmpty() {
        return (top < 0);
    }

    void display() {
        cout << "Stack elements are:";
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

// Stack class for linked list implementation
class StackLinkedList {
private:
    Node* top;
public:
    StackLinkedList() {
        top = nullptr;
    }

    void push(int x) {
        Node* newNode = new Node();
        newNode->data = x;
        newNode->next = top;
        top = newNode;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow" << endl;
            return 0;
        }
        Node* temp = top;
        int poppedValue = temp->data;
        top = top->next;
        delete temp;
        return poppedValue;
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is Empty" << endl;
            return 0;
        }
        return top->data;
    }

    bool isEmpty() {
        return (top == nullptr);
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is Empty" << endl;
            return;
        }
        cout << "Stack elements are:";
        Node* temp = top;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    StackArray stackArray;
    StackLinkedList stackLinkedList;

    // Array implementation
    stackArray.push(1);
    stackArray.push(2);
    stackArray.push(3);
    stackArray.display();
    cout << "Popped element from array stack: " << stackArray.pop() << endl;
    stackArray.display();

    // Linked list implementation
    stackLinkedList.push(11);
    stackLinkedList.push(12);
    stackLinkedList.push(13);
    stackLinkedList.display();
    cout << "Popped element from linked list stack: " << stackLinkedList.pop() << endl;
    stackLinkedList.display();

    return 0;
}

